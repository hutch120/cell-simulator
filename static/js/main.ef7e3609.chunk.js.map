{"version":3,"sources":["game/StateMachine.tsx","game/Constants.tsx","components/styled/Controls.tsx","game/Controls.tsx","components/styled/Cells.tsx","components/Cell.tsx","components/styled/Board.tsx","game/Board.tsx","components/styled/Game.tsx","game/Game.tsx","App.tsx","index.tsx"],"names":["rows","cols","CELL_SIZE","intervalID","board","makeEmptyBoard","emptyBoard","y","x","makeCells","setCells","cells","push","runIteration","newBoard","neighbors","calculateNeighbors","dirs","i","length","dir","y1","x1","initalise","_rows","_cols","run","interval","window","setInterval","stop","clearInterval","handleClickBoard","event","boardRef","elemOffset","rect","current","getBoundingClientRect","doc","document","documentElement","left","pageXOffset","clientLeft","top","pageYOffset","clientTop","getElementOffset","offsetX","clientX","offsetY","clientY","Math","floor","handleIntervalChange","parseInt","currentTarget","value","handleRowsChange","setRows","handleColsChange","setCols","handleRandom","random","handleClear","handleTestGlider","handleTestToad","Outer","styled","div","Inner","Content","Button","button","Input","input","InputWrapper","Controls","isRunning","setIsRunning","onChange","StateMachine","onClick","Box","Cell","style","width","height","Grid","Board","boardSize","backgroundSize","ref","map","cell","cellKey","Page","Title","Instructions","Link","a","Game","rowsInitial","colsInitial","useState","useRef","useEffect","controlsArgs","boardArgs","href","App","HEIGHT","WIDTH","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ef7e3609.chunk.js","sourcesContent":["import React from 'react'\r\nimport { CellProps } from '../components/Cell'\r\nimport { CELL_SIZE } from './Constants'\r\n\r\nlet intervalID : number | null = null\r\nlet board : boolean[][] = []\r\nlet rows: number\r\nlet cols: number\r\n\r\nfunction initalise (_rows: number, _cols: number) {\r\n  rows = _rows\r\n  cols = _cols\r\n  board = makeEmptyBoard()\r\n}\r\n\r\nfunction run (interval: number, setCells: React.Dispatch<React.SetStateAction<CellProps[]>>) {\r\n  runIteration(setCells)\r\n  intervalID = window.setInterval(() => {\r\n    runIteration(setCells)\r\n  }, interval)\r\n}\r\n\r\nfunction stop () {\r\n  if (intervalID) {\r\n    window.clearInterval(intervalID)\r\n    intervalID = null\r\n  }\r\n}\r\n\r\nfunction makeEmptyBoard (): boolean[][] {\r\n  const emptyBoard : boolean[][] = []\r\n  for (let y = 0; y < rows; y++) {\r\n    emptyBoard[y] = []\r\n    for (let x = 0; x < cols; x++) {\r\n      emptyBoard[y][x] = false\r\n    }\r\n  }\r\n  return emptyBoard\r\n}\r\n\r\nfunction getElementOffset (boardRef: React.RefObject<HTMLDivElement>) {\r\n  const rect = boardRef?.current?.getBoundingClientRect()\r\n  const doc = document.documentElement\r\n  return {\r\n    x: (rect?.left ?? 0 + window.pageXOffset) - doc.clientLeft,\r\n    y: (rect?.top ?? 0 + window.pageYOffset) - doc.clientTop\r\n  }\r\n}\r\n\r\nfunction makeCells (setCells: React.Dispatch<React.SetStateAction<CellProps[]>>) {\r\n  const cells : CellProps[] = []\r\n  for (let y = 0; y < rows; y++) {\r\n    for (let x = 0; x < cols; x++) {\r\n      if (board[y][x]) {\r\n        cells.push({ x, y })\r\n      }\r\n    }\r\n  }\r\n  setCells(cells)\r\n}\r\n\r\nfunction handleClickBoard (event: React.MouseEvent<HTMLElement>, setCells: React.Dispatch<React.SetStateAction<CellProps[]>>, boardRef: React.RefObject<HTMLDivElement>) {\r\n  const elemOffset = getElementOffset(boardRef)\r\n  const offsetX = event.clientX - elemOffset.x\r\n  const offsetY = event.clientY - elemOffset.y\r\n  const x = Math.floor(offsetX / CELL_SIZE)\r\n  const y = Math.floor(offsetY / CELL_SIZE)\r\n  if (x >= 0 && x <= cols && y >= 0 && y <= rows) {\r\n    board[y][x] = !board[y][x]\r\n  }\r\n  makeCells(setCells)\r\n}\r\n\r\nfunction runIteration (setCells: React.Dispatch<React.SetStateAction<CellProps[]>>) {\r\n  const newBoard = makeEmptyBoard()\r\n\r\n  for (let y = 0; y < rows; y++) {\r\n    for (let x = 0; x < cols; x++) {\r\n      const neighbors = calculateNeighbors(board, x, y)\r\n      if (board[y][x]) {\r\n        if (neighbors === 2 || neighbors === 3) {\r\n          newBoard[y][x] = true\r\n        } else {\r\n          newBoard[y][x] = false\r\n        }\r\n      } else {\r\n        if (!board[y][x] && neighbors === 3) {\r\n          newBoard[y][x] = true\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  board = newBoard\r\n  makeCells(setCells)\r\n}\r\n\r\n/**\r\n     * Calculate the number of neighbors at point (x, y)\r\n     * @param {Array} board\r\n     * @param {int} x\r\n     * @param {int} y\r\n     */\r\nfunction calculateNeighbors (board: boolean[][], x: number, y: number) {\r\n  let neighbors = 0\r\n  const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]]\r\n  for (let i = 0; i < dirs.length; i++) {\r\n    const dir = dirs[i]\r\n    const y1 = y + dir[0]\r\n    const x1 = x + dir[1]\r\n    if (x1 >= 0 && x1 < cols && y1 >= 0 && y1 < rows && board[y1][x1]) {\r\n      neighbors++\r\n    }\r\n  }\r\n  return neighbors\r\n}\r\n\r\nfunction handleIntervalChange (event: React.FormEvent<HTMLInputElement>, setInterval: React.Dispatch<React.SetStateAction<number>>) {\r\n  const value = parseInt(event?.currentTarget?.value) || 0\r\n  setInterval(value)\r\n}\r\n\r\nfunction handleRowsChange (event: React.FormEvent<HTMLInputElement>, setRows: React.Dispatch<React.SetStateAction<number>>) {\r\n  const value = parseInt(event?.currentTarget?.value) || 0\r\n  setRows(value)\r\n}\r\n\r\nfunction handleColsChange (event: React.FormEvent<HTMLInputElement>, setCols: React.Dispatch<React.SetStateAction<number>>) {\r\n  const value = parseInt(event?.currentTarget?.value) || 0\r\n  setCols(value)\r\n}\r\n\r\nfunction handleClear (setCells: React.Dispatch<React.SetStateAction<CellProps[]>>) {\r\n  board = makeEmptyBoard()\r\n  makeCells(setCells)\r\n}\r\n\r\nfunction handleRandom (setCells: React.Dispatch<React.SetStateAction<CellProps[]>>) {\r\n  for (let y = 0; y < rows; y++) {\r\n    for (let x = 0; x < cols; x++) {\r\n      board[y][x] = (Math.random() >= 0.5)\r\n    }\r\n  }\r\n  makeCells(setCells)\r\n}\r\n\r\nfunction handleTestGlider (setCells: React.Dispatch<React.SetStateAction<CellProps[]>>) {\r\n  board = makeEmptyBoard()\r\n  board[10][11] = true\r\n  board[10][12] = true\r\n  board[10][13] = true\r\n  board[9][13] = true\r\n  board[8][12] = true\r\n  makeCells(setCells)\r\n}\r\n\r\nfunction handleTestToad (setCells: React.Dispatch<React.SetStateAction<CellProps[]>>) {\r\n  board = makeEmptyBoard()\r\n  board[10][10] = true\r\n  board[10][11] = true\r\n  board[10][12] = true\r\n\r\n  board[11][9] = true\r\n  board[11][10] = true\r\n  board[11][11] = true\r\n\r\n  makeCells(setCells)\r\n}\r\n\r\nexport default {\r\n  initalise,\r\n  run,\r\n  stop,\r\n  handleClickBoard,\r\n  handleIntervalChange,\r\n  handleRowsChange,\r\n  handleColsChange,\r\n  handleRandom,\r\n  handleClear,\r\n  runIteration,\r\n  handleTestGlider,\r\n  handleTestToad\r\n}\r\n","export const CELL_SIZE = 20\r\nexport const WIDTH = 800\r\nexport const HEIGHT = 600\r\n","import styled from 'styled-components'\r\n\r\nexport const Outer = styled.div`\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-content: center;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n`\r\n\r\nexport const Inner = styled.div`\r\n    max-width: 1000px;\r\n    min-width: 500px;\r\n    flex-shrink: 0;\r\n    margin: 20px;\r\n    border: 4px solid transparent;\r\n    background-origin: border-box;\r\n    background-clip: content-box, border-box;\r\n    background-size: cover;\r\n    box-sizing: border-box;\r\n    box-shadow: 0 0 5px 5px rgba(0, 0, 0, 0.5);\r\n    background-image: linear-gradient(to bottom left, #7d7d7d,#4747a5);\r\n`\r\n\r\nexport const Content = styled.div`\r\n    padding: 20px;\r\n`\r\n\r\nexport const Button = styled.button`\r\n    margin-left: 12px;\r\n    cursor: pointer;\r\n`\r\n\r\nexport const Input = styled.input`\r\n    width: 40px;\r\n    margin: 4px;\r\n`\r\n\r\nexport const InputWrapper = styled.div`\r\n`\r\n","import React from 'react'\r\nimport { CellProps } from '../components/Cell'\r\nimport StateMachine from './StateMachine'\r\n\r\nimport { Outer, Inner, Content, Button, Input, InputWrapper } from '../components/styled/Controls'\r\n\r\nexport interface ControlsProps {\r\n  interval: number,\r\n  setInterval: React.Dispatch<React.SetStateAction<number>>,\r\n  rows: number,\r\n  setRows: React.Dispatch<React.SetStateAction<number>>,\r\n  cols: number,\r\n  setCols: React.Dispatch<React.SetStateAction<number>>,\r\n  isRunning: boolean,\r\n  setIsRunning: React.Dispatch<React.SetStateAction<boolean>>,\r\n  setCells: React.Dispatch<React.SetStateAction<CellProps[]>>\r\n}\r\n\r\nexport default function Controls ({ interval, setInterval, rows, setRows, cols, setCols, isRunning, setIsRunning, setCells } : ControlsProps) {\r\n  return <Outer>\r\n    <Inner>\r\n      <Content>\r\n        <InputWrapper>\r\n          Update every\r\n          <Input value={interval} onChange={(event: React.FormEvent<HTMLInputElement>) =>\r\n            StateMachine.handleIntervalChange(event, setInterval)} />\r\n            msec\r\n        </InputWrapper>\r\n\r\n        <InputWrapper>\r\n          Rows\r\n          <Input value={rows} onChange={(event: React.FormEvent<HTMLInputElement>) =>\r\n            StateMachine.handleRowsChange(event, setRows)} />\r\n        </InputWrapper>\r\n\r\n        <InputWrapper>\r\n          Columns\r\n          <Input value={cols} onChange={(event: React.FormEvent<HTMLInputElement>) =>\r\n            StateMachine.handleColsChange(event, setCols)} />\r\n        </InputWrapper>\r\n\r\n        <Button onClick={() => {\r\n          setIsRunning(false)\r\n          StateMachine.handleRandom(setCells)\r\n        }}>Generate</Button>\r\n\r\n        <Button onClick={() => {\r\n          setIsRunning(false)\r\n          StateMachine.runIteration(setCells)\r\n        }}>Iterate</Button>\r\n\r\n        {isRunning && <Button onClick={() => setIsRunning(false)}>Stop</Button>}\r\n\r\n        {!isRunning && <Button onClick={() => setIsRunning(true)}>Run</Button>}\r\n\r\n        <Button onClick={() => {\r\n          setIsRunning(false)\r\n          StateMachine.handleClear(setCells)\r\n        }}>Clear</Button>\r\n\r\n        <Button onClick={() => {\r\n          setIsRunning(false)\r\n          StateMachine.handleTestGlider(setCells)\r\n          setIsRunning(true)\r\n        }}>Test Glider</Button>\r\n\r\n        <Button onClick={() => {\r\n          setIsRunning(false)\r\n          StateMachine.handleTestToad(setCells)\r\n          setIsRunning(true)\r\n        }}>Test Toad</Button>\r\n\r\n        </Content>\r\n        </Inner>\r\n      </Outer>\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const Box = styled.div`\r\n  background: #ccc;\r\n  position: absolute;\r\n`\r\n","import React from 'react'\r\nimport { CELL_SIZE } from '../game/Constants'\r\nimport { Box } from './styled/Cells'\r\n\r\nexport interface CellProps {\r\n  x: number,\r\n  y: number\r\n}\r\n\r\nexport default function Cell ({ x, y } : CellProps) {\r\n  return <Box style={{\r\n    left: `${CELL_SIZE * x + 1}px`,\r\n    top: `${CELL_SIZE * y + 1}px`,\r\n    width: `${CELL_SIZE - 1}px`,\r\n    height: `${CELL_SIZE - 1}px`\r\n  }} />\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const Outer = styled.div`\r\n\r\n`\r\n\r\nexport const Grid = styled.div`\r\n    cursor: pointer;\r\n    position: relative;\r\n    margin: 0 auto;\r\n    background-color: #000;\r\n    background-image:\r\n    linear-gradient(#333 1px, transparent 1px),\r\n    linear-gradient(90deg, #333 1px, transparent 1px);\r\n`\r\n","import React from 'react'\r\nimport { CELL_SIZE } from './Constants'\r\nimport Cell, { CellProps } from '../components/Cell'\r\nimport StateMachine from './StateMachine'\r\nimport { Outer, Grid } from '../components/styled/Board'\r\n\r\nexport interface BoardProps {\r\n    rows: number,\r\n    cols: number,\r\n    boardRef: React.RefObject<HTMLDivElement>,\r\n    cells: CellProps[],\r\n    setCells: React.Dispatch<React.SetStateAction<CellProps[]>>\r\n}\r\n\r\nexport default function Board ({ rows, cols, boardRef, cells, setCells } : BoardProps) {\r\n  const boardSize = {\r\n    height: rows * CELL_SIZE,\r\n    width: cols * CELL_SIZE,\r\n    backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`\r\n  }\r\n\r\n  return <Outer>\r\n          <Grid style={boardSize}\r\n            onClick={(event : React.MouseEvent<HTMLElement>) => StateMachine.handleClickBoard(event, setCells, boardRef)}\r\n            ref={boardRef}>\r\n            {cells.map((cell) => {\r\n              const cellKey = `${cell.x},${cell.y}`\r\n              return <Cell x={cell.x} y={cell.y} key={cellKey} />\r\n            })}\r\n          </Grid>\r\n      </Outer>\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const Page = styled.div`\r\n  text-align: center;\r\n  padding: 0;\r\n  background: rebeccapurple;\r\n  color: white;\r\n  border: none;\r\n  height: 100vh;\r\n  width: 100vw;\r\n`\r\n\r\nexport const Title = styled.div`\r\n    text-align: center;\r\n    font-size: 26px;\r\n    padding-top: 20px;\r\n`\r\n\r\nexport const Instructions = styled.div`\r\n    text-align: center;\r\n    font-size: 16px;\r\n    padding-top: 10px;\r\n`\r\n\r\nexport const Link = styled.a`\r\n    color: white;\r\n`\r\n","import React, { useState, useRef, useEffect } from 'react'\nimport { CellProps } from '../components/Cell'\nimport StateMachine from './StateMachine'\nimport Controls, { ControlsProps } from './Controls'\nimport Board, { BoardProps } from './Board'\nimport { Page, Title, Instructions, Link } from '../components/styled/Game'\n\ninterface GameProps {\n  rowsInitial: number,\n  colsInitial: number\n}\n\nexport default function Game ({ rowsInitial, colsInitial } : GameProps) {\n  const [cells, setCells] = useState<CellProps[]>([])\n  const [rows, setRows] = useState(rowsInitial)\n  const [cols, setCols] = useState(colsInitial)\n  const [isRunning, setIsRunning] = useState(false)\n  const [interval, setInterval] = useState(100)\n  const boardRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    StateMachine.initalise(rows, cols)\n  }, [rows, cols])\n\n  useEffect(() => {\n    (isRunning) ? StateMachine.run(interval, setCells) : StateMachine.stop()\n  }, [isRunning])\n\n  const controlsArgs: ControlsProps = { interval, setInterval, rows, setRows, cols, setCols, isRunning, setIsRunning, setCells }\n  const boardArgs: BoardProps = { rows, cols, boardRef, cells, setCells }\n\n  return <Page>\n      <Title>Cell Simulator</Title>\n      <Instructions>Click the board squares to setup the initial state, or use Random button to randomize the board.</Instructions>\n      <Instructions>Then click Run or Iterate button to see the iterations.</Instructions>\n      <Controls {...controlsArgs} />\n      <Board {...boardArgs} />\n      <Instructions><Link href=\"https://github.com/hutch120/cell-simulator\">View Source on Github</Link></Instructions>\n    </Page>\n}\n","import React from 'react'\nimport Game from './game/Game'\nimport { CELL_SIZE, WIDTH, HEIGHT } from './game/Constants'\n\nexport default function App () {\n  const rows = HEIGHT / CELL_SIZE // default 30\n  const cols = WIDTH / CELL_SIZE // default 40\n\n  return <Game rowsInitial={rows} colsInitial={cols} />\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}