{"version":3,"sources":["game/Constants.tsx","components/styled/Box.tsx","components/Cell.tsx","game/Controls.tsx","components/styled/AppWrapper.tsx","components/styled/Board.tsx","components/styled/ControlsWrapper.tsx","components/styled/Button.tsx","components/styled/Title.tsx","components/styled/Input.tsx","game/Game.tsx","App.tsx","index.tsx"],"names":["CELL_SIZE","Box","styled","div","Cell","x","y","style","left","top","width","height","rows","cols","intervalID","board","makeEmptyBoard","emptyBoard","makeCells","setCells","cells","push","runIteration","newBoard","neighbors","calculateNeighbors","dirs","i","length","dir","y1","x1","initalise","_rows","_cols","run","interval","window","setInterval","stop","clearInterval","handleClickBoard","event","boardRef","elemOffset","rect","current","getBoundingClientRect","doc","document","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","getElementOffset","offsetX","clientX","offsetY","clientY","Math","floor","handleIntervalChange","parseInt","currentTarget","value","handleRowsChange","setRows","handleColsChange","setColumns","handleRandom","random","handleClear","handleTest1","handleTest2","AppWrapper","Board","ControlsWrapper","Button","button","Title","Input","input","InputWrapper","Game","rowsInitial","colsInitial","useState","isRunning","setIsRunning","useRef","useEffect","Controls","boardStyle","backgroundSize","onChange","onClick","ref","map","cell","cellKey","App","HEIGHT","WIDTH","ReactDOM","render","StrictMode","getElementById"],"mappings":"wMAAaA,EAAY,G,cCEZC,EAAMC,IAAOC,IAAV,wE,OCOD,SAASC,EAAT,GAAsC,IAArBC,EAAoB,EAApBA,EAAGC,EAAiB,EAAjBA,EACjC,OAAO,cAACL,EAAD,CAAKM,MAAO,CACjBC,KAAK,GAAD,OAAKR,EAAYK,EAAI,EAArB,MACJI,IAAI,GAAD,OAAKT,EAAYM,EAAI,EAArB,MACHI,MAAM,GAAD,OAAKV,GAAL,MACLW,OAAO,GAAD,OAAKX,GAAL,SCVV,IAEIY,EACAC,EAHAC,EAA6B,KAC7BC,EAAsB,GAwB1B,SAASC,IAEP,IADA,IAAMC,EAA2B,GACxBX,EAAI,EAAGA,EAAIM,EAAMN,IAAK,CAC7BW,EAAWX,GAAK,GAChB,IAAK,IAAID,EAAI,EAAGA,EAAIQ,EAAMR,IACxBY,EAAWX,GAAGD,IAAK,EAGvB,OAAOY,EAYT,SAASC,EAAWC,GAElB,IADA,IAAMC,EAAsB,GACnBd,EAAI,EAAGA,EAAIM,EAAMN,IACxB,IAAK,IAAID,EAAI,EAAGA,EAAIQ,EAAMR,IACpBU,EAAMT,GAAGD,IACXe,EAAMC,KAAK,CAAEhB,IAAGC,MAItBa,EAASC,GAeX,SAASE,EAAcH,GAGrB,IAFA,IAAMI,EAAWP,IAERV,EAAI,EAAGA,EAAIM,EAAMN,IACxB,IAAK,IAAID,EAAI,EAAGA,EAAIQ,EAAMR,IAAK,CAC7B,IAAMmB,EAAYC,EAAmBV,EAAOV,EAAGC,GAC3CS,EAAMT,GAAGD,GAETkB,EAASjB,GAAGD,GADI,IAAdmB,GAAiC,IAAdA,EAMlBT,EAAMT,GAAGD,IAAoB,IAAdmB,IAClBD,EAASjB,GAAGD,IAAK,GAMzBU,EAAQQ,EACRL,EAAUC,GASZ,SAASM,EAAoBV,EAAoBV,EAAWC,GAG1D,IAFA,IAAIkB,EAAY,EACVE,EAAO,CAAC,EAAE,GAAI,GAAI,EAAE,EAAG,GAAI,EAAE,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,IACvEC,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAAK,CACpC,IAAME,EAAMH,EAAKC,GACXG,EAAKxB,EAAIuB,EAAI,GACbE,EAAK1B,EAAIwB,EAAI,GACfE,GAAM,GAAKA,EAAKlB,GAAQiB,GAAM,GAAKA,EAAKlB,GAAQG,EAAMe,GAAIC,IAC5DP,IAGJ,OAAOA,EAoDM,I,cAAA,GACbQ,UA9JF,SAAoBC,EAAeC,GACjCtB,EAAOqB,EACPpB,EAAOqB,EACPnB,EAAQC,KA4JRmB,IAzJF,SAAcC,EAAkBjB,GAC9BG,EAAaH,GACbL,EAAauB,OAAOC,aAAY,WAC9BhB,EAAaH,KACZiB,IAsJHG,KAnJF,WACMzB,IACFuB,OAAOG,cAAc1B,GACrBA,EAAa,OAiJf2B,iBA7GF,SAA2BC,EAAsCvB,EAA6DwB,GAC5H,IAAMC,EAtBR,SAA2BD,GAA4C,IAAD,MAC9DE,EAAI,OAAGF,QAAH,IAAGA,GAAH,UAAGA,EAAUG,eAAb,aAAG,EAAmBC,wBAC1BC,EAAMC,SAASC,gBACrB,MAAO,CACL7C,GAAG,iBAACwC,QAAD,IAACA,OAAD,EAACA,EAAMrC,YAAP,QAAe,EAAI6B,OAAOc,aAAeH,EAAII,WAChD9C,GAAG,iBAACuC,QAAD,IAACA,OAAD,EAACA,EAAMpC,WAAP,QAAc,EAAI4B,OAAOgB,aAAeL,EAAIM,WAiB9BC,CAAiBZ,GAC9Ba,EAAUd,EAAMe,QAAUb,EAAWvC,EACrCqD,EAAUhB,EAAMiB,QAAUf,EAAWtC,EACrCD,EAAIuD,KAAKC,MAAML,EAAUxD,GACzBM,EAAIsD,KAAKC,MAAMH,EAAU1D,GAC3BK,GAAK,GAAKA,GAAKQ,GAAQP,GAAK,GAAKA,GAAKM,IACxCG,EAAMT,GAAGD,IAAMU,EAAMT,GAAGD,IAE1Ba,EAAUC,IAqGV2C,qBAtDF,SAA+BpB,EAA0CJ,GAA4D,IAAD,EAElIA,EADcyB,SAAQ,OAACrB,QAAD,IAACA,GAAD,UAACA,EAAOsB,qBAAR,aAAC,EAAsBC,QAAU,IAsDvDC,iBAlDF,SAA2BxB,EAA0CyB,GAAwD,IAAD,EAE1HA,EADcJ,SAAQ,OAACrB,QAAD,IAACA,GAAD,UAACA,EAAOsB,qBAAR,aAAC,EAAsBC,QAAU,IAkDvDG,iBA9CF,SAA2B1B,EAA0C2B,GAA2D,IAAD,EAE7HA,EADcN,SAAQ,OAACrB,QAAD,IAACA,GAAD,UAACA,EAAOsB,qBAAR,aAAC,EAAsBC,QAAU,IA8CvDK,aArCF,SAAuBnD,GACrB,IAAK,IAAIb,EAAI,EAAGA,EAAIM,EAAMN,IACxB,IAAK,IAAID,EAAI,EAAGA,EAAIQ,EAAMR,IACxBU,EAAMT,GAAGD,GAAMuD,KAAKW,UAAY,GAGpCrD,EAAUC,IAgCVqD,YA3CF,SAAsBrD,GACpBJ,EAAQC,IACRE,EAAUC,IA0CVG,eACAmD,YA/BF,SAAsBtD,IACpBJ,EAAQC,KACF,IAAI,KAAM,EAChBD,EAAM,IAAI,KAAM,EAChBA,EAAM,IAAI,KAAM,EAChBA,EAAM,GAAG,KAAM,EACfA,EAAM,GAAG,KAAM,EACfG,EAAUC,IAyBVuD,YAtBF,SAAsBvD,IACpBJ,EAAQC,KACF,IAAI,KAAM,EAChBD,EAAM,IAAI,KAAM,EAChBA,EAAM,IAAI,KAAM,EAChBA,EAAM,GAAG,KAAM,EACfA,EAAM,GAAG,KAAM,EACfG,EAAUC,KCjKCwD,EAAazE,IAAOC,IAAV,yLCAVyE,EAAQ1E,IAAOC,IAAV,uOCAL0E,EAAkB3E,IAAOC,IAAV,6ECAf2E,EAAS5E,IAAO6E,OAAV,0ECANC,EAAQ9E,IAAOC,IAAV,mGCAL8E,EAAQ/E,IAAOgF,MAAV,+FAMLC,EAAejF,IAAOC,IAAV,+CCSV,SAASiF,EAAT,GAA0D,IAAzCC,EAAwC,EAAxCA,YAAaC,EAA2B,EAA3BA,YAC3C,EAA0BC,mBAAsB,IAAhD,mBAAOnE,EAAP,KAAcD,EAAd,KACA,EAAwBoE,mBAASF,GAAjC,mBAAOzE,EAAP,KAAauD,EAAb,KACA,EAA2BoB,mBAASD,GAApC,mBAAOzE,EAAP,KAAawD,EAAb,KACA,EAAkCkB,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCF,mBAAS,KAAzC,mBAAOnD,EAAP,KAAiBE,EAAjB,KACMK,EAAW+C,iBAAuB,MAExCC,qBAAU,WACRC,EAAS5D,UAAUpB,EAAMC,KACxB,CAACD,EAAMC,IAEV8E,qBAAU,WACPH,EAAaI,EAASzD,IAAIC,EAAUjB,GAAYyE,EAASrD,SACzD,CAACiD,IAEJ,IAAMK,EAAa,CACjBlF,OAAQC,EAAOZ,EACfU,MAAOG,EAAOb,EACd8F,eAAe,GAAD,OAAK9F,EAAL,cAAoBA,EAApB,OAGhB,OAAO,eAAC2E,EAAD,WACH,cAACK,EAAD,6BAEA,eAACH,EAAD,WACE,eAACM,EAAD,0BAEE,cAACF,EAAD,CAAOhB,MAAO7B,EAAU2D,SAAU,SAACrD,GAAD,OAChCkD,EAAS9B,qBAAqBpB,EAAOJ,MAHzC,UAMA,eAAC6C,EAAD,kBAEE,cAACF,EAAD,CAAOhB,MAAOrD,EAAMmF,SAAU,SAACrD,GAAD,OAC5BkD,EAAS1B,iBAAiBxB,EAAOyB,SAErC,eAACgB,EAAD,qBAEE,cAACF,EAAD,CAAOhB,MAAOpD,EAAMkF,SAAU,SAACrD,GAAD,OAC5BkD,EAASxB,iBAAiB1B,EAAO2B,SAGrC,cAACS,EAAD,CAAQkB,QAAS,WACfP,GAAa,GACbG,EAAStE,aAAaH,IAFxB,qBAICqE,GAAa,cAACV,EAAD,CAAQkB,QAAS,kBAAMP,GAAa,IAApC,mBACZD,GAAa,cAACV,EAAD,CAAQkB,QAAS,kBAAMP,GAAa,IAApC,iBACf,cAACX,EAAD,CAAQkB,QAAS,WACfP,GAAa,GACbG,EAAStB,aAAanD,IAFxB,oBAIA,cAAC2D,EAAD,CAAQkB,QAAS,WACfP,GAAa,GACbG,EAASpB,YAAYrD,IAFvB,mBAIA,cAAC2D,EAAD,CAAQkB,QAAS,WACfP,GAAa,GACbG,EAASnB,YAAYtD,IAFvB,mBAIA,cAAC2D,EAAD,CAAQkB,QAAS,WACfP,GAAa,GACbG,EAASlB,YAAYvD,IAFvB,sBAMF,cAACyD,EAAD,CAAOrE,MAAOsF,EACZG,QAAS,SAACtD,GAAD,OAA2CkD,EAASnD,iBAAiBC,EAAOvB,EAAUwB,IAC/FsD,IAAKtD,EAFP,SAGGvB,EAAM8E,KAAI,SAACC,GACV,IAAMC,EAAO,UAAMD,EAAK9F,EAAX,YAAgB8F,EAAK7F,GAClC,OAAO,cAACF,EAAD,CAAMC,EAAG8F,EAAK9F,EAAGC,EAAG6F,EAAK7F,GAAQ8F,WCrFnC,SAASC,IAItB,OAAO,cAACjB,EAAD,CAAMC,YAHAiB,GAGmBhB,YAFnBiB,KCDfC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACL,EAAD,MAEFpD,SAAS0D,eAAe,W","file":"static/js/main.bb3f1695.chunk.js","sourcesContent":["export const CELL_SIZE = 20\r\nexport const WIDTH = 800\r\nexport const HEIGHT = 600\r\n","import styled from 'styled-components'\r\n\r\nexport const Box = styled.div`\r\n  background: #ccc;\r\n  position: absolute;\r\n`\r\n","import React from 'react'\r\nimport { CELL_SIZE } from '../game/Constants'\r\nimport { Box } from './styled/Box'\r\n\r\nexport interface CellProps {\r\n  x: number,\r\n  y: number\r\n}\r\n\r\nexport default function Cell ({ x, y } : CellProps) {\r\n  return <Box style={{\r\n    left: `${CELL_SIZE * x + 1}px`,\r\n    top: `${CELL_SIZE * y + 1}px`,\r\n    width: `${CELL_SIZE - 1}px`,\r\n    height: `${CELL_SIZE - 1}px`\r\n  }} />\r\n}\r\n","import React from 'react'\r\nimport { CellProps } from '../components/Cell'\r\nimport { CELL_SIZE } from './Constants'\r\n\r\nlet intervalID : number | null = null\r\nlet board : boolean[][] = []\r\nlet rows: number\r\nlet cols: number\r\n\r\nfunction initalise (_rows: number, _cols: number) {\r\n  rows = _rows\r\n  cols = _cols\r\n  board = makeEmptyBoard()\r\n}\r\n\r\nfunction run (interval: number, setCells: React.Dispatch<React.SetStateAction<CellProps[]>>) {\r\n  runIteration(setCells)\r\n  intervalID = window.setInterval(() => {\r\n    runIteration(setCells)\r\n  }, interval)\r\n}\r\n\r\nfunction stop () {\r\n  if (intervalID) {\r\n    window.clearInterval(intervalID)\r\n    intervalID = null\r\n  }\r\n}\r\n\r\nfunction makeEmptyBoard (): boolean[][] {\r\n  const emptyBoard : boolean[][] = []\r\n  for (let y = 0; y < rows; y++) {\r\n    emptyBoard[y] = []\r\n    for (let x = 0; x < cols; x++) {\r\n      emptyBoard[y][x] = false\r\n    }\r\n  }\r\n  return emptyBoard\r\n}\r\n\r\nfunction getElementOffset (boardRef: React.RefObject<HTMLDivElement>) {\r\n  const rect = boardRef?.current?.getBoundingClientRect()\r\n  const doc = document.documentElement\r\n  return {\r\n    x: (rect?.left ?? 0 + window.pageXOffset) - doc.clientLeft,\r\n    y: (rect?.top ?? 0 + window.pageYOffset) - doc.clientTop\r\n  }\r\n}\r\n\r\nfunction makeCells (setCells: React.Dispatch<React.SetStateAction<CellProps[]>>) {\r\n  const cells : CellProps[] = []\r\n  for (let y = 0; y < rows; y++) {\r\n    for (let x = 0; x < cols; x++) {\r\n      if (board[y][x]) {\r\n        cells.push({ x, y })\r\n      }\r\n    }\r\n  }\r\n  setCells(cells)\r\n}\r\n\r\nfunction handleClickBoard (event: React.MouseEvent<HTMLElement>, setCells: React.Dispatch<React.SetStateAction<CellProps[]>>, boardRef: React.RefObject<HTMLDivElement>) {\r\n  const elemOffset = getElementOffset(boardRef)\r\n  const offsetX = event.clientX - elemOffset.x\r\n  const offsetY = event.clientY - elemOffset.y\r\n  const x = Math.floor(offsetX / CELL_SIZE)\r\n  const y = Math.floor(offsetY / CELL_SIZE)\r\n  if (x >= 0 && x <= cols && y >= 0 && y <= rows) {\r\n    board[y][x] = !board[y][x]\r\n  }\r\n  makeCells(setCells)\r\n}\r\n\r\nfunction runIteration (setCells: React.Dispatch<React.SetStateAction<CellProps[]>>) {\r\n  const newBoard = makeEmptyBoard()\r\n\r\n  for (let y = 0; y < rows; y++) {\r\n    for (let x = 0; x < cols; x++) {\r\n      const neighbors = calculateNeighbors(board, x, y)\r\n      if (board[y][x]) {\r\n        if (neighbors === 2 || neighbors === 3) {\r\n          newBoard[y][x] = true\r\n        } else {\r\n          newBoard[y][x] = false\r\n        }\r\n      } else {\r\n        if (!board[y][x] && neighbors === 3) {\r\n          newBoard[y][x] = true\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  board = newBoard\r\n  makeCells(setCells)\r\n}\r\n\r\n/**\r\n     * Calculate the number of neighbors at point (x, y)\r\n     * @param {Array} board\r\n     * @param {int} x\r\n     * @param {int} y\r\n     */\r\nfunction calculateNeighbors (board: boolean[][], x: number, y: number) {\r\n  let neighbors = 0\r\n  const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]]\r\n  for (let i = 0; i < dirs.length; i++) {\r\n    const dir = dirs[i]\r\n    const y1 = y + dir[0]\r\n    const x1 = x + dir[1]\r\n    if (x1 >= 0 && x1 < cols && y1 >= 0 && y1 < rows && board[y1][x1]) {\r\n      neighbors++\r\n    }\r\n  }\r\n  return neighbors\r\n}\r\n\r\nfunction handleIntervalChange (event: React.FormEvent<HTMLInputElement>, setInterval: React.Dispatch<React.SetStateAction<number>>) {\r\n  const value = parseInt(event?.currentTarget?.value) || 0\r\n  setInterval(value)\r\n}\r\n\r\nfunction handleRowsChange (event: React.FormEvent<HTMLInputElement>, setRows: React.Dispatch<React.SetStateAction<number>>) {\r\n  const value = parseInt(event?.currentTarget?.value) || 0\r\n  setRows(value)\r\n}\r\n\r\nfunction handleColsChange (event: React.FormEvent<HTMLInputElement>, setColumns: React.Dispatch<React.SetStateAction<number>>) {\r\n  const value = parseInt(event?.currentTarget?.value) || 0\r\n  setColumns(value)\r\n}\r\n\r\nfunction handleClear (setCells: React.Dispatch<React.SetStateAction<CellProps[]>>) {\r\n  board = makeEmptyBoard()\r\n  makeCells(setCells)\r\n}\r\n\r\nfunction handleRandom (setCells: React.Dispatch<React.SetStateAction<CellProps[]>>) {\r\n  for (let y = 0; y < rows; y++) {\r\n    for (let x = 0; x < cols; x++) {\r\n      board[y][x] = (Math.random() >= 0.5)\r\n    }\r\n  }\r\n  makeCells(setCells)\r\n}\r\n\r\nfunction handleTest1 (setCells: React.Dispatch<React.SetStateAction<CellProps[]>>) {\r\n  board = makeEmptyBoard()\r\n  board[10][11] = true\r\n  board[10][12] = true\r\n  board[10][13] = true\r\n  board[9][13] = true\r\n  board[8][12] = true\r\n  makeCells(setCells)\r\n}\r\n\r\nfunction handleTest2 (setCells: React.Dispatch<React.SetStateAction<CellProps[]>>) {\r\n  board = makeEmptyBoard()\r\n  board[10][11] = true\r\n  board[10][12] = true\r\n  board[10][13] = true\r\n  board[9][13] = true\r\n  board[8][12] = true\r\n  makeCells(setCells)\r\n}\r\n\r\nexport default {\r\n  initalise,\r\n  run,\r\n  stop,\r\n  handleClickBoard,\r\n  handleIntervalChange,\r\n  handleRowsChange,\r\n  handleColsChange,\r\n  handleRandom,\r\n  handleClear,\r\n  runIteration,\r\n  handleTest1,\r\n  handleTest2\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const AppWrapper = styled.div`\r\n  text-align: center;\r\n  padding: 0;\r\n  background: rebeccapurple;\r\n  color: white;\r\n  border: none;\r\n  cursor: pointer;\r\n  height: 100vh;\r\n  width: 100vw;\r\n`\r\n","import styled from 'styled-components'\r\n\r\nexport const Board = styled.div`\r\n    position: relative;\r\n    margin: 0 auto;\r\n    background-color: #000;\r\n    background-image:\r\n    linear-gradient(#333 1px, transparent 1px),\r\n    linear-gradient(90deg, #333 1px, transparent 1px);\r\n`\r\n","import styled from 'styled-components'\r\n\r\nexport const ControlsWrapper = styled.div`\r\n    margin-top: 20px;\r\n    margin-bottom: 20px;\r\n`\r\n","import styled from 'styled-components'\r\n\r\nexport const Button = styled.button`\r\n    margin-left: 12px;\r\n    cursor: pointer;\r\n`\r\n","import styled from 'styled-components'\r\n\r\nexport const Title = styled.div`\r\n    text-align: center;\r\n    font-size: 26px;\r\n    padding-top: 20px;\r\n`\r\n","import styled from 'styled-components'\r\n\r\nexport const Input = styled.input`\r\n    width: 40px;\r\n    margin-left: 10px;\r\n    margin-right: 10px;\r\n`\r\n\r\nexport const InputWrapper = styled.div`\r\n    margin: 10px;\r\n`\r\n","import React, { useState, useRef, useEffect } from 'react'\nimport { CELL_SIZE } from './Constants'\nimport Cell, { CellProps } from '../components/Cell'\nimport Controls from './Controls'\n\nimport { AppWrapper } from '../components/styled/AppWrapper'\nimport { Board } from '../components/styled/Board'\nimport { ControlsWrapper } from '../components/styled/ControlsWrapper'\nimport { Button } from '../components/styled/Button'\nimport { Title } from '../components/styled/Title'\nimport { Input, InputWrapper } from '../components/styled/Input'\n\ninterface GameProps {\n  rowsInitial: number,\n  colsInitial: number\n}\n\nexport default function Game ({ rowsInitial, colsInitial } : GameProps) {\n  const [cells, setCells] = useState<CellProps[]>([])\n  const [rows, setRows] = useState(rowsInitial)\n  const [cols, setColumns] = useState(colsInitial)\n  const [isRunning, setIsRunning] = useState(false)\n  const [interval, setInterval] = useState(100)\n  const boardRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    Controls.initalise(rows, cols)\n  }, [rows, cols])\n\n  useEffect(() => {\n    (isRunning) ? Controls.run(interval, setCells) : Controls.stop()\n  }, [isRunning])\n\n  const boardStyle = {\n    height: rows * CELL_SIZE,\n    width: cols * CELL_SIZE,\n    backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`\n  }\n\n  return <AppWrapper>\n      <Title>Cell Simulator</Title>\n\n      <ControlsWrapper>\n        <InputWrapper>\n          Update every\n          <Input value={interval} onChange={(event: React.FormEvent<HTMLInputElement>) =>\n            Controls.handleIntervalChange(event, setInterval)} />\n            msec\n        </InputWrapper>\n        <InputWrapper>\n          Rows\n          <Input value={rows} onChange={(event: React.FormEvent<HTMLInputElement>) =>\n            Controls.handleRowsChange(event, setRows)} />\n        </InputWrapper>\n        <InputWrapper>\n          Columns\n          <Input value={cols} onChange={(event: React.FormEvent<HTMLInputElement>) =>\n            Controls.handleColsChange(event, setColumns)} />\n        </InputWrapper>\n\n        <Button onClick={() => {\n          setIsRunning(false)\n          Controls.runIteration(setCells)\n        }}>Iterate</Button>\n        {isRunning && <Button onClick={() => setIsRunning(false)}>Stop</Button>}\n        {!isRunning && <Button onClick={() => setIsRunning(true)}>Run</Button>}\n        <Button onClick={() => {\n          setIsRunning(false)\n          Controls.handleRandom(setCells)\n        }}>Random</Button>\n        <Button onClick={() => {\n          setIsRunning(false)\n          Controls.handleClear(setCells)\n        }}>Clear</Button>\n        <Button onClick={() => {\n          setIsRunning(false)\n          Controls.handleTest1(setCells)\n        }}>Test1</Button>\n        <Button onClick={() => {\n          setIsRunning(false)\n          Controls.handleTest2(setCells)\n        }}>Test2</Button>\n      </ControlsWrapper>\n\n      <Board style={boardStyle}\n        onClick={(event : React.MouseEvent<HTMLElement>) => Controls.handleClickBoard(event, setCells, boardRef)}\n        ref={boardRef}>\n        {cells.map((cell) => {\n          const cellKey = `${cell.x},${cell.y}`\n          return <Cell x={cell.x} y={cell.y} key={cellKey} />\n        })}\n      </Board>\n    </AppWrapper>\n}\n","import React from 'react'\nimport Game from './game/Game'\nimport { CELL_SIZE, WIDTH, HEIGHT } from './game/Constants'\n\nexport default function App () {\n  const rows = HEIGHT / CELL_SIZE // default 30\n  const cols = WIDTH / CELL_SIZE // default 40\n\n  return <Game rowsInitial={rows} colsInitial={cols} />\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}